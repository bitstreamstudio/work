// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zrpc_test.proto

#ifndef PROTOBUF_zrpc_5ftest_2eproto__INCLUDED
#define PROTOBUF_zrpc_5ftest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace zproto {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_zrpc_5ftest_2eproto();
void protobuf_InitDefaults_zrpc_5ftest_2eproto();
void protobuf_AssignDesc_zrpc_5ftest_2eproto();
void protobuf_ShutdownFile_zrpc_5ftest_2eproto();

class ZRpcTestPush;
class ZRpcTestReq;
class ZRpcTestRsp;

// ===================================================================

class ZRpcTestReq : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.ZRpcTestReq) */ {
 public:
  ZRpcTestReq();
  virtual ~ZRpcTestReq();

  ZRpcTestReq(const ZRpcTestReq& from);

  inline ZRpcTestReq& operator=(const ZRpcTestReq& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZRpcTestReq& default_instance();

  static const ZRpcTestReq* internal_default_instance();

  void Swap(ZRpcTestReq* other);

  // implements Message ----------------------------------------------

  inline ZRpcTestReq* New() const { return New(NULL); }

  ZRpcTestReq* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ZRpcTestReq* other);
  void UnsafeMergeFrom(const ZRpcTestReq& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string req_id = 1;
  void clear_req_id();
  static const int kReqIdFieldNumber = 1;
  const ::std::string& req_id() const;
  void set_req_id(const ::std::string& value);
  void set_req_id(const char* value);
  void set_req_id(const char* value, size_t size);
  ::std::string* mutable_req_id();
  ::std::string* release_req_id();
  void set_allocated_req_id(::std::string* req_id);

  // @@protoc_insertion_point(class_scope:zproto.ZRpcTestReq)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr req_id_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_zrpc_5ftest_2eproto_impl();
  friend void  protobuf_AddDesc_zrpc_5ftest_2eproto_impl();
  friend void protobuf_AssignDesc_zrpc_5ftest_2eproto();
  friend void protobuf_ShutdownFile_zrpc_5ftest_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ZRpcTestReq> ZRpcTestReq_default_instance_;

// -------------------------------------------------------------------

class ZRpcTestRsp : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.ZRpcTestRsp) */ {
 public:
  ZRpcTestRsp();
  virtual ~ZRpcTestRsp();

  ZRpcTestRsp(const ZRpcTestRsp& from);

  inline ZRpcTestRsp& operator=(const ZRpcTestRsp& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZRpcTestRsp& default_instance();

  static const ZRpcTestRsp* internal_default_instance();

  void Swap(ZRpcTestRsp* other);

  // implements Message ----------------------------------------------

  inline ZRpcTestRsp* New() const { return New(NULL); }

  ZRpcTestRsp* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ZRpcTestRsp* other);
  void UnsafeMergeFrom(const ZRpcTestRsp& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string rsp_data = 1;
  void clear_rsp_data();
  static const int kRspDataFieldNumber = 1;
  const ::std::string& rsp_data() const;
  void set_rsp_data(const ::std::string& value);
  void set_rsp_data(const char* value);
  void set_rsp_data(const char* value, size_t size);
  ::std::string* mutable_rsp_data();
  ::std::string* release_rsp_data();
  void set_allocated_rsp_data(::std::string* rsp_data);

  // @@protoc_insertion_point(class_scope:zproto.ZRpcTestRsp)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr rsp_data_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_zrpc_5ftest_2eproto_impl();
  friend void  protobuf_AddDesc_zrpc_5ftest_2eproto_impl();
  friend void protobuf_AssignDesc_zrpc_5ftest_2eproto();
  friend void protobuf_ShutdownFile_zrpc_5ftest_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ZRpcTestRsp> ZRpcTestRsp_default_instance_;

// -------------------------------------------------------------------

class ZRpcTestPush : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:zproto.ZRpcTestPush) */ {
 public:
  ZRpcTestPush();
  virtual ~ZRpcTestPush();

  ZRpcTestPush(const ZRpcTestPush& from);

  inline ZRpcTestPush& operator=(const ZRpcTestPush& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZRpcTestPush& default_instance();

  static const ZRpcTestPush* internal_default_instance();

  void Swap(ZRpcTestPush* other);

  // implements Message ----------------------------------------------

  inline ZRpcTestPush* New() const { return New(NULL); }

  ZRpcTestPush* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ZRpcTestPush* other);
  void UnsafeMergeFrom(const ZRpcTestPush& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string push_data = 1;
  void clear_push_data();
  static const int kPushDataFieldNumber = 1;
  const ::std::string& push_data() const;
  void set_push_data(const ::std::string& value);
  void set_push_data(const char* value);
  void set_push_data(const char* value, size_t size);
  ::std::string* mutable_push_data();
  ::std::string* release_push_data();
  void set_allocated_push_data(::std::string* push_data);

  // @@protoc_insertion_point(class_scope:zproto.ZRpcTestPush)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr push_data_;
  mutable int _cached_size_;
  friend void  protobuf_InitDefaults_zrpc_5ftest_2eproto_impl();
  friend void  protobuf_AddDesc_zrpc_5ftest_2eproto_impl();
  friend void protobuf_AssignDesc_zrpc_5ftest_2eproto();
  friend void protobuf_ShutdownFile_zrpc_5ftest_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<ZRpcTestPush> ZRpcTestPush_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ZRpcTestReq

// optional string req_id = 1;
inline void ZRpcTestReq::clear_req_id() {
  req_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ZRpcTestReq::req_id() const {
  // @@protoc_insertion_point(field_get:zproto.ZRpcTestReq.req_id)
  return req_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZRpcTestReq::set_req_id(const ::std::string& value) {
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.ZRpcTestReq.req_id)
}
inline void ZRpcTestReq::set_req_id(const char* value) {
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.ZRpcTestReq.req_id)
}
inline void ZRpcTestReq::set_req_id(const char* value, size_t size) {
  
  req_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.ZRpcTestReq.req_id)
}
inline ::std::string* ZRpcTestReq::mutable_req_id() {
  
  // @@protoc_insertion_point(field_mutable:zproto.ZRpcTestReq.req_id)
  return req_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZRpcTestReq::release_req_id() {
  // @@protoc_insertion_point(field_release:zproto.ZRpcTestReq.req_id)
  
  return req_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZRpcTestReq::set_allocated_req_id(::std::string* req_id) {
  if (req_id != NULL) {
    
  } else {
    
  }
  req_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), req_id);
  // @@protoc_insertion_point(field_set_allocated:zproto.ZRpcTestReq.req_id)
}

inline const ZRpcTestReq* ZRpcTestReq::internal_default_instance() {
  return &ZRpcTestReq_default_instance_.get();
}
// -------------------------------------------------------------------

// ZRpcTestRsp

// optional string rsp_data = 1;
inline void ZRpcTestRsp::clear_rsp_data() {
  rsp_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ZRpcTestRsp::rsp_data() const {
  // @@protoc_insertion_point(field_get:zproto.ZRpcTestRsp.rsp_data)
  return rsp_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZRpcTestRsp::set_rsp_data(const ::std::string& value) {
  
  rsp_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.ZRpcTestRsp.rsp_data)
}
inline void ZRpcTestRsp::set_rsp_data(const char* value) {
  
  rsp_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.ZRpcTestRsp.rsp_data)
}
inline void ZRpcTestRsp::set_rsp_data(const char* value, size_t size) {
  
  rsp_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.ZRpcTestRsp.rsp_data)
}
inline ::std::string* ZRpcTestRsp::mutable_rsp_data() {
  
  // @@protoc_insertion_point(field_mutable:zproto.ZRpcTestRsp.rsp_data)
  return rsp_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZRpcTestRsp::release_rsp_data() {
  // @@protoc_insertion_point(field_release:zproto.ZRpcTestRsp.rsp_data)
  
  return rsp_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZRpcTestRsp::set_allocated_rsp_data(::std::string* rsp_data) {
  if (rsp_data != NULL) {
    
  } else {
    
  }
  rsp_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), rsp_data);
  // @@protoc_insertion_point(field_set_allocated:zproto.ZRpcTestRsp.rsp_data)
}

inline const ZRpcTestRsp* ZRpcTestRsp::internal_default_instance() {
  return &ZRpcTestRsp_default_instance_.get();
}
// -------------------------------------------------------------------

// ZRpcTestPush

// optional string push_data = 1;
inline void ZRpcTestPush::clear_push_data() {
  push_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ZRpcTestPush::push_data() const {
  // @@protoc_insertion_point(field_get:zproto.ZRpcTestPush.push_data)
  return push_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZRpcTestPush::set_push_data(const ::std::string& value) {
  
  push_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:zproto.ZRpcTestPush.push_data)
}
inline void ZRpcTestPush::set_push_data(const char* value) {
  
  push_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:zproto.ZRpcTestPush.push_data)
}
inline void ZRpcTestPush::set_push_data(const char* value, size_t size) {
  
  push_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:zproto.ZRpcTestPush.push_data)
}
inline ::std::string* ZRpcTestPush::mutable_push_data() {
  
  // @@protoc_insertion_point(field_mutable:zproto.ZRpcTestPush.push_data)
  return push_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZRpcTestPush::release_push_data() {
  // @@protoc_insertion_point(field_release:zproto.ZRpcTestPush.push_data)
  
  return push_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZRpcTestPush::set_allocated_push_data(::std::string* push_data) {
  if (push_data != NULL) {
    
  } else {
    
  }
  push_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), push_data);
  // @@protoc_insertion_point(field_set_allocated:zproto.ZRpcTestPush.push_data)
}

inline const ZRpcTestPush* ZRpcTestPush::internal_default_instance() {
  return &ZRpcTestPush_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace zproto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zrpc_5ftest_2eproto__INCLUDED
